name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3-beta, etc.
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '9.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for GitVersion
          
      - name: 🏷️ Determine Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
            
            # Check if it's a prerelease (contains alpha, beta, rc, pre)
            if [[ "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "📋 Release Details:"
          echo "   Version: $VERSION"
          echo "   Pre-release: $IS_PRERELEASE"
          
      - name: ✅ Validate Version Format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\-\.]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "   Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 📦 Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.fsproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: 🔧 Restore dependencies
        run: dotnet restore
        
      - name: 🏗️ Build Solution
        run: dotnet build --no-restore -c Release -p:Version="${{ needs.validate.outputs.version }}"
        
      - name: 🧪 Run Tests
        run: dotnet test --no-build -c Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"
        
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/*.trx
            **/coverage.cobertura.xml
            
      - name: 📦 Create NuGet Packages
        run: dotnet pack --no-build -c Release -p:Version="${{ needs.validate.outputs.version }}" -o ./packages
        
      - name: 🗂️ Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./packages/*.nupkg
          retention-days: 7

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 🔍 Run Security Scan
        run: |
          dotnet list package --vulnerable --include-transitive || true
          dotnet list package --deprecated --include-transitive || true

  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-test, security-scan]
    permissions:
      contents: write
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📥 Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages
          
      - name: 📝 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Try to get the previous tag for changelog generation
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate release notes
          cat > release_notes.md << 'EOF'
          ## 🚀 Orleans.StateMachineES v${{ needs.validate.outputs.version }}
          
          ### 📦 What's New
          
          This release includes the following components:
          - **Core StateMachineGrain**: Enhanced Orleans actor-based state machines
          - **Event Sourcing**: Complete event sourcing capabilities with JournaledGrain
          - **Hierarchical States**: Support for nested and hierarchical state machine patterns
          - **Timers & Reminders**: Built-in timeout and recurring timer support
          - **Saga Orchestration**: Long-running workflow coordination
          - **Distributed Tracing**: OpenTelemetry integration for observability
          - **Health Checks & Monitoring**: ASP.NET Core health check integration
          - **Visualization**: State machine graph generation and export
          - **Versioning & Migration**: Schema evolution and backward compatibility
          - **State Machine Composition**: Component-based state machine building
          - **Roslyn Source Generator**: YAML/JSON to C# code generation
          - **Orthogonal Regions**: Parallel state machine support
          
          ### 📋 Changes
          EOF
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to HEAD..."
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" >> release_notes.md
          else
            echo "- Initial release of Orleans.StateMachineES" >> release_notes.md
          fi
          
          cat >> release_notes.md << 'EOF'
          
          ### 🔗 Installation
          
          ```bash
          # Main library
          dotnet add package Orleans.StateMachineES --version ${{ needs.validate.outputs.version }}
          
          # Source generator (optional)
          dotnet add package Orleans.StateMachineES.Generators --version ${{ needs.validate.outputs.version }}
          ```
          
          ### 📚 Documentation
          
          - [Getting Started Guide](https://github.com/ivlt/Orleans.StateMachineES/blob/main/README.md)
          - [Cheat Sheet](https://github.com/ivlt/Orleans.StateMachineES/blob/main/docs/CHEAT_SHEET.md)
          - [API Documentation](https://github.com/ivlt/Orleans.StateMachineES/tree/main/docs)
          - [Examples](https://github.com/ivlt/Orleans.StateMachineES/tree/main/examples)
          
          ### ⚠️ Breaking Changes
          EOF
          
          if [ "${{ needs.validate.outputs.is-prerelease }}" = "true" ]; then
            cat >> release_notes.md << 'EOF'
          
          **This is a pre-release version**
          - May contain breaking changes
          - Recommended for testing and evaluation only
          - Not recommended for production use
          EOF
          fi
          
          cat >> release_notes.md << 'EOF'
          
          ### 🏗️ Built With
          
          - .NET 9.0
          - Microsoft Orleans 9.1.2
          - Stateless 5.17.0
          - OpenTelemetry
          
          ---
          
          **Full Changelog**: https://github.com/ivlt/Orleans.StateMachineES/compare/$PREVIOUS_TAG...v${{ needs.validate.outputs.version }}
          EOF
          
      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Orleans.StateMachineES v${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          files: ./packages/*.nupkg
          prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' }}
          generate_release_notes: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-nuget:
    name: 📦 Publish to NuGet
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    environment: nuget-production
    
    steps:
      - name: 📥 Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages
          
      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: 🚀 Publish to NuGet
        run: |
          for package in ./packages/*.nupkg; do
            echo "📦 Publishing $(basename "$package")..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          
      - name: ✅ Verify Publication
        run: |
          echo "🎉 Successfully published Orleans.StateMachineES v${{ needs.validate.outputs.version }} to NuGet!"
          echo "📦 Packages published:"
          ls -la ./packages/
          
      - name: 📢 Update Package Status
        run: |
          echo "📋 Release Summary:"
          echo "   Version: ${{ needs.validate.outputs.version }}"
          echo "   Pre-release: ${{ needs.validate.outputs.is-prerelease }}"
          echo "   Packages: $(ls ./packages/*.nupkg | wc -l)"
          echo "   Status: ✅ Published to NuGet"